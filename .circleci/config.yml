defaults: &defaults
  docker:
    - image: ekino/dind-aws:latest
  working_directory: /workspace

remote_docker: &remote_docker
  setup_remote_docker:
    version: 20.10.11
    docker_layer_caching: true

docker_env: &docker_env
  run:
    name: Set docker env
    command: |
      TAG=$(echo "v.$CIRCLE_BRANCH.$CIRCLE_SHA1" | sed 's/\//_/g')

      echo "export DOCKER_TAG=$TAG" >> $BASH_ENV
      echo "export BRANCH=$CIRCLE_BRANCH" >> $BASH_ENV
      echo "export DOCKER_REGISTRY=662863386798.dkr.ecr.eu-central-1.amazonaws.com" >> $BASH_ENV
      echo "export DOCKER_IMAGE=liveeo-model" >> $BASH_ENV

docker_build: &docker_build
  run:
    name: Build docker images
    command: |
      docker build \
        -t $DOCKER_REGISTRY/$DOCKER_IMAGE:$DOCKER_TAG \
        -t $DOCKER_REGISTRY/$DOCKER_IMAGE:$BRANCH \
        -f Dockerfile .

docker_save: &docker_save
  run:
    name: Save docker images
    command: |
      mkdir -p /docker
      docker save \
        $DOCKER_REGISTRY/$DOCKER_IMAGE:$DOCKER_TAG \
        -o /docker/$DOCKER_IMAGE-$DOCKER_TAG.tar
      docker save \
        $DOCKER_REGISTRY/$DOCKER_IMAGE:$BRANCH \
        -o /docker/$DOCKER_IMAGE-$BRANCH.tar

docker_import: &docker_import
  run:
    name: Import docker images
    command: |
      docker load \
        -i /docker/$DOCKER_IMAGE-$DOCKER_TAG.tar
      docker load \
        -i /docker/$DOCKER_IMAGE-$BRANCH.tar

docker_push: &docker_push
  run: 
    name: Push docker images to ECR
    command: |
      aws ecr get-login-password --region eu-central-1 | docker login --username AWS --password-stdin 662863386798.dkr.ecr.eu-central-1.amazonaws.com
      docker push $DOCKER_REGISTRY/$DOCKER_IMAGE:$DOCKER_TAG
      docker push $DOCKER_REGISTRY/$DOCKER_IMAGE:$BRANCH   

aws_login: &aws_login
  aws-cli/setup:
    aws-access-key-id: AWS_ACCESS_KEY_ID
    aws-secret-access-key: AWS_SECRET_ACCESS_KEY
    aws-region: AWS_REGION_NAME 

redeploy-service: &redeploy-service
  run:
    name: Redeploy tasks
    command: |
      for i in liveeo-model; do
        aws ecs update-service --cluster $CLUSTER --service $i --force-new-deployment || echo "Service redeployed"
      done                      

version: 2.1
orbs:
  docker: circleci/docker@2.0.3
  aws-cli: circleci/aws-cli@3.1.3
  aws-s3: circleci/aws-s3@3.0
parameters:
  dataset_s3:
    type: string
    default: liveeo-data
  num_epochs:
    type: integer
    default: 10
  accelerator:
    type: enum
    enum: ["cpu","gpu"]
    default: "cpu"  
jobs:
  build:
    <<: *defaults
    steps:
      - checkout
      - <<: *remote_docker
      - <<: *docker_env
      - aws-s3/copy:
          from: "s3://<< pipeline.parameters.dataset_s3 >>"
          to: "./"
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-region: AWS_REGION_NAME
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY        
      - <<: *docker_build
      - <<: *docker_save
      - save_cache:
          key: docker-{{ .Branch }}-{{ .Revision }}
          paths: ["/docker"]  
  push: 
    <<: *defaults
    steps:
      - checkout
      - <<: *remote_docker
      - <<: *docker_env
      - restore_cache:
          keys:
            - docker-{{ .Branch }}-{{ .Revision }}
      - <<: *docker_import
      - <<: *aws_login
      - <<: *docker_push
  deploy:
    <<: *defaults
    steps:
      - run: echo "export CLUSTER=liveeo" >> $BASH_ENV
      - <<: *aws_login
      - <<: *redeploy-service      

workflows:
  version: 2
  pipeline:
      jobs:
        - build:
            filters:
              tags:
                only: /.*/
        - push:
            requires:
              - build
            filters:
              branches:
                only: [/.*/]
        - deploy:
            requires: 
              - push
            filters:
              branches: 
                only: [main]                




